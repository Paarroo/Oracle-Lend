import fs from "fs";
import path from "path";

async function main() {
  const jsonPath = path.join(__dirname, "../../nextjs/contracts/allContracts.json");
  const outputPath = path.join(__dirname, "../../nextjs/contracts/deployedContracts.ts");

  // Read the exported JSON
  const contractsJson = JSON.parse(fs.readFileSync(jsonPath, "utf8"));

  // Transform the structure to match Scaffold-ETH format
  const deployedContracts: any = {};

  // Process each chain
  for (const [chainId, chainData] of Object.entries(contractsJson)) {
    if (chainId === "31337") {
      // For localhost/hardhat
      deployedContracts[chainId] = {};

      for (const [contractName, contractInfo] of Object.entries((chainData as any)[0].contracts)) {
        deployedContracts[chainId][contractName] = contractInfo;
      }
    }
  }

  // Keep existing Intuition testnet contracts if they exist
  try {
    const existingContracts = fs.readFileSync(outputPath, "utf8");
    if (existingContracts.includes("13579")) {
      // Extract existing 13579 contracts
      const match = existingContracts.match(/13579:\s*{[\s\S]*?(?=^\s*\d+:|^\s*}\s*as\s*const)/m);
      if (match) {
        console.log("Preserving existing Intuition testnet contracts");
      }
    }
  } catch (err) {
    // File doesn't exist or can't be read
  }

  // Generate TypeScript file content
  const tsContent = `/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = ${JSON.stringify(deployedContracts, null, 2)} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
`;

  fs.writeFileSync(outputPath, tsContent);
  console.log("✅ Contracts exported to TypeScript format");

  // Clean up JSON file
  fs.unlinkSync(jsonPath);
  console.log("✅ Cleaned up temporary JSON file");
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});