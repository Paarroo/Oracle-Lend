{
  "address": "0x552948CC80f3D757E4c18a702F5DdD42a06E7039",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dex",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleLend__BorrowingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleLend__InsufficientLiquidatorORACLE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleLend__InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleLend__NotLiquidatable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleLend__RepayingFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleLend__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleLend__UnsafePositionRatio",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AssetBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "AssetRepaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountForLiquidator",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidatedUserDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addCollateral",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dex",
      "outputs": [
        {
          "internalType": "contract IDEX",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdrawOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "fundContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractOracleBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getHealthRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getMaxBorrowAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxBorrow",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getMaxWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxWithdraw",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "healthRatio",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "liquidatable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "liquidatable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x824254f4ed5e7f6249312b2ba3db203884cdb3849e8a5bdf5390bf8ac00d6d9f",
  "receipt": {
    "to": null,
    "from": "0xAD50D6A764F10D531A759cc4b651FE3A96c7D03B",
    "contractAddress": "0x552948CC80f3D757E4c18a702F5DdD42a06E7039",
    "transactionIndex": 1,
    "gasUsed": "1692839",
    "logsBloom": "0x
    "blockHash": "0x79521e798c01631028f30125cea1b61fa07a8f5ab34d6376ad571b6ca755e1ca",
    "transactionHash": "0x824254f4ed5e7f6249312b2ba3db203884cdb3849e8a5bdf5390bf8ac00d6d9f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1748262,
        "transactionHash": "0x824254f4ed5e7f6249312b2ba3db203884cdb3849e8a5bdf5390bf8ac00d6d9f",
        "address": "0x552948CC80f3D757E4c18a702F5DdD42a06E7039",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ad50d6a764f10d531a759cc4b651fe3a96c7d03b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x79521e798c01631028f30125cea1b61fa07a8f5ab34d6376ad571b6ca755e1ca"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 1748262,
        "transactionHash": "0x824254f4ed5e7f6249312b2ba3db203884cdb3849e8a5bdf5390bf8ac00d6d9f",
        "address": "0x1AA6ad0A70Dd90796F2936BD11F0d4DEF7553b04",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000552948cc80f3d757e4c18a702f5ddd42a06e7039",
          "0x000000000000000000000000552948cc80f3d757e4c18a702f5ddd42a06e7039"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x79521e798c01631028f30125cea1b61fa07a8f5ab34d6376ad571b6ca755e1ca"
      }
    ],
    "blockNumber": 1748262,
    "cumulativeGasUsed": "1692839",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x216cCe003Be533D11Fd4B6d87F066Eef48B42568",
    "0x1AA6ad0A70Dd90796F2936BD11F0d4DEF7553b04"
  ],
  "numDeployments": 1,
  "solcInputHash": "c8b93e15ab5bae41e27b56a84ef8415e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleLend__BorrowingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleLend__InsufficientLiquidatorORACLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleLend__InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleLend__NotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleLend__RepayingFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleLend__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleLend__UnsafePositionRatio\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AssetBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"AssetRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountForLiquidator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedUserDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"calculateCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"contract IDEX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdrawOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractOracleBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getHealthRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxBorrowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBorrow\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"liquidatable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"liquidatable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Over-collateralized lending protocol using ETH as collateral and ORACLE as borrowable asset\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addCollateral()\":{\"details\":\"Users send ETH which is stored as collateral for borrowing ORACLE tokens\"},\"borrowOracle(uint256)\":{\"params\":{\"borrowAmount\":\"Amount of ORACLE tokens to borrow (18 decimals)\"}},\"calculateCollateralValue(uint256)\":{\"params\":{\"collateralAmount\":\"ETH collateral amount in wei\"},\"returns\":{\"value\":\"Collateral value in ORACLE tokens (18 decimals)\"}},\"emergencyWithdrawETH(uint256)\":{\"params\":{\"amount\":\"Amount of ETH to withdraw\"}},\"emergencyWithdrawOracle(uint256)\":{\"params\":{\"amount\":\"Amount of ORACLE tokens to withdraw\"}},\"fundContract(uint256)\":{\"params\":{\"amount\":\"Amount of ORACLE tokens to add\"}},\"getContractETHBalance()\":{\"returns\":{\"balance\":\"Available ETH balance\"}},\"getContractOracleBalance()\":{\"returns\":{\"balance\":\"Available ORACLE tokens for lending\"}},\"getCurrentPrice()\":{\"returns\":{\"price\":\"ORACLE per 1 ETH (18 decimals)\"}},\"getHealthRatio(address)\":{\"params\":{\"user\":\"Address to check\"},\"returns\":{\"ratio\":\"Health ratio as percentage (120 = 120%)\"}},\"getMaxBorrowAmount(address)\":{\"params\":{\"user\":\"Address to check\"},\"returns\":{\"maxBorrow\":\"Maximum borrowable amount\"}},\"getMaxWithdrawableCollateral(address)\":{\"params\":{\"user\":\"Address to check  \"},\"returns\":{\"maxWithdraw\":\"Maximum withdrawable ETH amount\"}},\"getUserPosition(address)\":{\"params\":{\"user\":\"Address to check\"},\"returns\":{\"borrowed\":\"ORACLE debt amount  \",\"collateral\":\"ETH collateral amount\",\"collateralValue\":\"Collateral value in ORACLE\",\"healthRatio\":\"Health ratio percentage\",\"liquidatable\":\"Whether position can be liquidated\"}},\"isLiquidatable(address)\":{\"params\":{\"user\":\"Address to check\"},\"returns\":{\"liquidatable\":\"True if position can be liquidated\"}},\"liquidate(address)\":{\"details\":\"Liquidator must approve ORACLE tokens to this contract first\",\"params\":{\"user\":\"Address of the user to liquidate\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"repayOracle(uint256)\":{\"params\":{\"repayAmount\":\"Amount of ORACLE tokens to repay (user must approve first)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawCollateral(uint256)\":{\"params\":{\"amount\":\"Amount of ETH to withdraw in wei\"}}},\"title\":\"OracleLend\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollateral()\":{\"notice\":\"Deposit ETH as collateral\"},\"borrowOracle(uint256)\":{\"notice\":\"Borrow ORACLE tokens against ETH collateral\"},\"calculateCollateralValue(uint256)\":{\"notice\":\"Calculate collateral value in ORACLE terms\"},\"emergencyWithdrawETH(uint256)\":{\"notice\":\"Emergency withdrawal of ETH (only owner)\"},\"emergencyWithdrawOracle(uint256)\":{\"notice\":\"Emergency withdrawal of ORACLE tokens (only owner)\"},\"fundContract(uint256)\":{\"notice\":\"Fund the contract with ORACLE tokens for lending\"},\"getContractETHBalance()\":{\"notice\":\"Get contract's ETH balance\"},\"getContractOracleBalance()\":{\"notice\":\"Get contract's ORACLE token balance\"},\"getCurrentPrice()\":{\"notice\":\"Get current ORACLE price in terms of ETH from DEX\"},\"getHealthRatio(address)\":{\"notice\":\"Get user's position health ratio (percentage)\"},\"getMaxBorrowAmount(address)\":{\"notice\":\"Get maximum ORACLE amount a user can borrow\"},\"getMaxWithdrawableCollateral(address)\":{\"notice\":\"Get maximum ETH collateral a user can withdraw\"},\"getUserPosition(address)\":{\"notice\":\"Get user's complete position info\"},\"isLiquidatable(address)\":{\"notice\":\"Check if a position is liquidatable (health ratio < 120%)\"},\"liquidate(address)\":{\"notice\":\"Liquidate an unsafe position\"},\"pause()\":{\"notice\":\"Pause the protocol (emergency stop)\"},\"repayOracle(uint256)\":{\"notice\":\"Repay ORACLE token debt\"},\"unpause()\":{\"notice\":\"Unpause the protocol\"},\"withdrawCollateral(uint256)\":{\"notice\":\"Withdraw ETH collateral (if position remains healthy)\"}},\"notice\":\"Based on SpeedRunEthereum lending challenge - uses DEX for price discovery\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OracleLend.sol\":\"OracleLend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/OracleLend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n// Import our DEX contract for price oracle\\ninterface IDEX {\\n    function getPrice(address _token) external view returns (uint256 price);\\n    function tTRUST() external view returns (address);\\n    function ORACLE() external view returns (address);\\n    function tTrustReserve() external view returns (uint256);\\n    function oracleReserve() external view returns (uint256);\\n}\\n\\n// Custom errors for gas efficiency\\nerror OracleLend__InvalidAmount();\\nerror OracleLend__TransferFailed();\\nerror OracleLend__UnsafePositionRatio();\\nerror OracleLend__BorrowingFailed();\\nerror OracleLend__RepayingFailed();\\nerror OracleLend__PositionSafe();\\nerror OracleLend__NotLiquidatable();\\nerror OracleLend__InsufficientLiquidatorORACLE();\\n\\n/**\\n * @title OracleLend\\n * @dev Over-collateralized lending protocol using ETH as collateral and ORACLE as borrowable asset\\n * @notice Based on SpeedRunEthereum lending challenge - uses DEX for price discovery\\n */\\ncontract OracleLend is Ownable, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    // Constants\\n    uint256 private constant COLLATERAL_RATIO = 120; // 120% collateralization required\\n    uint256 private constant LIQUIDATION_BONUS = 10; // 10% bonus for liquidators\\n    \\n    // Contract references\\n    IERC20 public immutable oracleToken;    // ORACLE token (borrowable asset)\\n    IDEX public immutable dex;              // DEX contract for price oracle\\n\\n    // User positions\\n    mapping(address => uint256) public userCollateral;  // ETH collateral in wei\\n    mapping(address => uint256) public userBorrowed;    // ORACLE tokens borrowed (18 decimals)\\n\\n    // Events\\n    event CollateralAdded(address indexed user, uint256 indexed amount, uint256 price);\\n    event CollateralWithdrawn(address indexed user, uint256 indexed amount, uint256 price);\\n    event AssetBorrowed(address indexed user, uint256 indexed amount, uint256 price);\\n    event AssetRepaid(address indexed user, uint256 indexed amount, uint256 price);\\n    event Liquidation(\\n        address indexed user,\\n        address indexed liquidator,\\n        uint256 amountForLiquidator,\\n        uint256 liquidatedUserDebt,\\n        uint256 price\\n    );\\n\\n    constructor(address _dex, address _oracleToken) Ownable(msg.sender) {\\n        require(_dex != address(0) && _oracleToken != address(0), \\\"Invalid addresses\\\");\\n        dex = IDEX(_dex);\\n        oracleToken = IERC20(_oracleToken);\\n        \\n        // Pre-approve for efficiency in liquidations\\n        oracleToken.approve(address(this), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Deposit ETH as collateral\\n     * @dev Users send ETH which is stored as collateral for borrowing ORACLE tokens\\n     */\\n    function addCollateral() external payable nonReentrant whenNotPaused {\\n        if (msg.value == 0) revert OracleLend__InvalidAmount();\\n        \\n        userCollateral[msg.sender] += msg.value;\\n        emit CollateralAdded(msg.sender, msg.value, getCurrentPrice());\\n    }\\n\\n    /**\\n     * @notice Withdraw ETH collateral (if position remains healthy)\\n     * @param amount Amount of ETH to withdraw in wei\\n     */\\n    function withdrawCollateral(uint256 amount) external nonReentrant whenNotPaused {\\n        if (amount == 0 || userCollateral[msg.sender] < amount) revert OracleLend__InvalidAmount();\\n\\n        uint256 currentCollateral = userCollateral[msg.sender];\\n        uint256 newCollateral = currentCollateral - amount;\\n        uint256 debt = userBorrowed[msg.sender];\\n\\n        // Check if withdrawal would make position unsafe\\n        if (debt > 0) {\\n            uint256 newCollateralValue = calculateCollateralValue(newCollateral);\\n            uint256 newRatio = (newCollateralValue * 100) / debt;\\n            if (newRatio < COLLATERAL_RATIO) revert OracleLend__UnsafePositionRatio();\\n        }\\n\\n        userCollateral[msg.sender] = newCollateral;\\n\\n        // Transfer ETH back to user\\n        (bool success, ) = payable(msg.sender).call{value: amount}(\\\"\\\");\\n        if (!success) revert OracleLend__TransferFailed();\\n\\n        emit CollateralWithdrawn(msg.sender, amount, getCurrentPrice());\\n    }\\n\\n    /**\\n     * @notice Borrow ORACLE tokens against ETH collateral\\n     * @param borrowAmount Amount of ORACLE tokens to borrow (18 decimals)\\n     */\\n    function borrowOracle(uint256 borrowAmount) external nonReentrant whenNotPaused {\\n        if (borrowAmount == 0) revert OracleLend__InvalidAmount();\\n\\n        // Check if contract has enough ORACLE tokens to lend\\n        require(oracleToken.balanceOf(address(this)) >= borrowAmount, \\\"Insufficient ORACLE liquidity\\\");\\n\\n        // Optimistically increase debt then validate position (gas efficient pattern)\\n        userBorrowed[msg.sender] += borrowAmount;\\n        _validatePosition(msg.sender);\\n\\n        // Transfer ORACLE tokens to borrower\\n        bool success = oracleToken.transfer(msg.sender, borrowAmount);\\n        if (!success) {\\n            // Revert the debt increase if transfer fails\\n            userBorrowed[msg.sender] -= borrowAmount;\\n            revert OracleLend__BorrowingFailed();\\n        }\\n\\n        emit AssetBorrowed(msg.sender, borrowAmount, getCurrentPrice());\\n    }\\n\\n    /**\\n     * @notice Repay ORACLE token debt\\n     * @param repayAmount Amount of ORACLE tokens to repay (user must approve first)\\n     */\\n    function repayOracle(uint256 repayAmount) external nonReentrant whenNotPaused {\\n        if (repayAmount == 0) revert OracleLend__InvalidAmount();\\n        \\n        uint256 debt = userBorrowed[msg.sender];\\n        if (repayAmount > debt) revert OracleLend__InvalidAmount();\\n\\n        // Transfer ORACLE from user to contract\\n        bool success = oracleToken.transferFrom(msg.sender, address(this), repayAmount);\\n        if (!success) revert OracleLend__RepayingFailed();\\n\\n        userBorrowed[msg.sender] = debt - repayAmount;\\n        emit AssetRepaid(msg.sender, repayAmount, getCurrentPrice());\\n    }\\n\\n    /**\\n     * @notice Liquidate an unsafe position\\n     * @param user Address of the user to liquidate\\n     * @dev Liquidator must approve ORACLE tokens to this contract first\\n     */\\n    function liquidate(address user) external nonReentrant whenNotPaused {\\n        if (!isLiquidatable(user)) revert OracleLend__NotLiquidatable();\\n        \\n        uint256 userDebt = userBorrowed[user];\\n        if (userDebt == 0) revert OracleLend__NotLiquidatable();\\n\\n        // Ensure liquidator has enough ORACLE tokens\\n        if (oracleToken.balanceOf(msg.sender) < userDebt) revert OracleLend__InsufficientLiquidatorORACLE();\\n\\n        // Pull ORACLE tokens from liquidator to repay debt\\n        bool pulled = oracleToken.transferFrom(msg.sender, address(this), userDebt);\\n        if (!pulled) revert OracleLend__RepayingFailed();\\n\\n        uint256 userCollateralAmount = userCollateral[user];\\n        uint256 collateralValue = calculateCollateralValue(userCollateralAmount);\\n\\n        // Clear user's debt\\n        userBorrowed[user] = 0;\\n\\n        // Calculate ETH collateral to give to liquidator\\n        uint256 collateralPurchased;\\n        if (collateralValue == 0) {\\n            collateralPurchased = userCollateralAmount;\\n        } else {\\n            // collateralPurchased = (userDebt * userCollateralAmount) / collateralValue\\n            collateralPurchased = (userDebt * userCollateralAmount) / collateralValue;\\n        }\\n\\n        // Add liquidation bonus (10%)\\n        uint256 liquidationReward = (collateralPurchased * LIQUIDATION_BONUS) / 100;\\n        uint256 amountForLiquidator = collateralPurchased + liquidationReward;\\n        \\n        // Cap at available collateral\\n        if (amountForLiquidator > userCollateralAmount) {\\n            amountForLiquidator = userCollateralAmount;\\n        }\\n\\n        userCollateral[user] = userCollateralAmount - amountForLiquidator;\\n\\n        // Send ETH collateral to liquidator\\n        (bool sent, ) = payable(msg.sender).call{value: amountForLiquidator}(\\\"\\\");\\n        if (!sent) revert OracleLend__TransferFailed();\\n\\n        emit Liquidation(user, msg.sender, amountForLiquidator, userDebt, getCurrentPrice());\\n    }\\n\\n    // View functions\\n\\n    /**\\n     * @notice Get current ORACLE price in terms of ETH from DEX\\n     * @return price ORACLE per 1 ETH (18 decimals)\\n     */\\n    function getCurrentPrice() public view returns (uint256 price) {\\n        // Get tTRUST price in ORACLE (since we're using tTRUST as ETH equivalent)\\n        try dex.getPrice(dex.tTRUST()) returns (uint256 _price) {\\n            return _price;\\n        } catch {\\n            // Fallback: calculate from reserves if getPrice fails\\n            uint256 tTrustReserve = dex.tTrustReserve();\\n            uint256 oracleReserve = dex.oracleReserve();\\n            if (tTrustReserve > 0 && oracleReserve > 0) {\\n                return (oracleReserve * 1e18) / tTrustReserve;\\n            }\\n            return 0; // No liquidity\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate collateral value in ORACLE terms\\n     * @param collateralAmount ETH collateral amount in wei\\n     * @return value Collateral value in ORACLE tokens (18 decimals)\\n     */\\n    function calculateCollateralValue(uint256 collateralAmount) public view returns (uint256 value) {\\n        uint256 price = getCurrentPrice(); // ORACLE per 1 ETH\\n        return (collateralAmount * price) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Check if a position is liquidatable (health ratio < 120%)\\n     * @param user Address to check\\n     * @return liquidatable True if position can be liquidated\\n     */\\n    function isLiquidatable(address user) public view returns (bool liquidatable) {\\n        uint256 debt = userBorrowed[user];\\n        if (debt == 0) return false;\\n        \\n        uint256 collateralValue = calculateCollateralValue(userCollateral[user]);\\n        uint256 healthRatio = (collateralValue * 100) / debt;\\n        \\n        return healthRatio < COLLATERAL_RATIO;\\n    }\\n\\n    /**\\n     * @notice Get user's position health ratio (percentage)\\n     * @param user Address to check\\n     * @return ratio Health ratio as percentage (120 = 120%)\\n     */\\n    function getHealthRatio(address user) external view returns (uint256 ratio) {\\n        uint256 debt = userBorrowed[user];\\n        if (debt == 0) return type(uint256).max; // No debt = infinite health\\n        \\n        uint256 collateralValue = calculateCollateralValue(userCollateral[user]);\\n        return (collateralValue * 100) / debt;\\n    }\\n\\n    /**\\n     * @notice Get maximum ORACLE amount a user can borrow\\n     * @param user Address to check\\n     * @return maxBorrow Maximum borrowable amount\\n     */\\n    function getMaxBorrowAmount(address user) external view returns (uint256 maxBorrow) {\\n        uint256 collateralValue = calculateCollateralValue(userCollateral[user]);\\n        uint256 currentDebt = userBorrowed[user];\\n        \\n        // Max borrowable = (collateralValue / COLLATERAL_RATIO) * 100 - currentDebt\\n        uint256 maxTotalBorrow = (collateralValue * 100) / COLLATERAL_RATIO;\\n        \\n        if (maxTotalBorrow > currentDebt) {\\n            return maxTotalBorrow - currentDebt;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Get maximum ETH collateral a user can withdraw\\n     * @param user Address to check  \\n     * @return maxWithdraw Maximum withdrawable ETH amount\\n     */\\n    function getMaxWithdrawableCollateral(address user) external view returns (uint256 maxWithdraw) {\\n        uint256 debt = userBorrowed[user];\\n        if (debt == 0) return userCollateral[user]; // No debt = can withdraw all\\n        \\n        uint256 price = getCurrentPrice();\\n        if (price == 0) return 0; // No price = can't calculate\\n        \\n        // Minimum collateral needed = (debt * COLLATERAL_RATIO * 1e18) / (price * 100)\\n        uint256 minCollateralNeeded = (debt * COLLATERAL_RATIO * 1e18) / (price * 100);\\n        uint256 currentCollateral = userCollateral[user];\\n        \\n        if (currentCollateral > minCollateralNeeded) {\\n            return currentCollateral - minCollateralNeeded;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Get user's complete position info\\n     * @param user Address to check\\n     * @return collateral ETH collateral amount\\n     * @return borrowed ORACLE debt amount  \\n     * @return collateralValue Collateral value in ORACLE\\n     * @return healthRatio Health ratio percentage\\n     * @return liquidatable Whether position can be liquidated\\n     */\\n    function getUserPosition(address user) external view returns (\\n        uint256 collateral,\\n        uint256 borrowed,\\n        uint256 collateralValue,\\n        uint256 healthRatio,\\n        bool liquidatable\\n    ) {\\n        collateral = userCollateral[user];\\n        borrowed = userBorrowed[user];\\n        collateralValue = calculateCollateralValue(collateral);\\n        \\n        if (borrowed == 0) {\\n            healthRatio = type(uint256).max;\\n            liquidatable = false;\\n        } else {\\n            healthRatio = (collateralValue * 100) / borrowed;\\n            liquidatable = healthRatio < COLLATERAL_RATIO;\\n        }\\n    }\\n\\n    // Internal functions\\n\\n    /**\\n     * @dev Validate that a user's position is healthy after a change\\n     * @param user Address to validate\\n     */\\n    function _validatePosition(address user) internal view {\\n        if (isLiquidatable(user)) revert OracleLend__UnsafePositionRatio();\\n    }\\n\\n    // Admin functions\\n\\n    /**\\n     * @notice Pause the protocol (emergency stop)\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause the protocol\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Fund the contract with ORACLE tokens for lending\\n     * @param amount Amount of ORACLE tokens to add\\n     */\\n    function fundContract(uint256 amount) external onlyOwner {\\n        oracleToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Emergency withdrawal of ORACLE tokens (only owner)\\n     * @param amount Amount of ORACLE tokens to withdraw\\n     */\\n    function emergencyWithdrawOracle(uint256 amount) external onlyOwner {\\n        oracleToken.safeTransfer(owner(), amount);\\n    }\\n\\n    /**\\n     * @notice Emergency withdrawal of ETH (only owner)\\n     * @param amount Amount of ETH to withdraw\\n     */\\n    function emergencyWithdrawETH(uint256 amount) external onlyOwner {\\n        require(address(this).balance >= amount, \\\"Insufficient ETH balance\\\");\\n        (bool success, ) = payable(owner()).call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n    }\\n\\n    /**\\n     * @notice Get contract's ORACLE token balance\\n     * @return balance Available ORACLE tokens for lending\\n     */\\n    function getContractOracleBalance() external view returns (uint256 balance) {\\n        return oracleToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Get contract's ETH balance\\n     * @return balance Available ETH balance\\n     */\\n    function getContractETHBalance() external view returns (uint256 balance) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to receive ETH (for collateral deposits)\\n     */\\n    receive() external payable {\\n        // Allow ETH deposits via receive() - they will be added as collateral\\n        if (msg.value > 0) {\\n            userCollateral[msg.sender] += msg.value;\\n            emit CollateralAdded(msg.sender, msg.value, getCurrentPrice());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb357e77f9625643585c36a900de5253741d7bcc05631a818b0301468aea979b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Over-collateralized lending protocol using ETH as collateral and ORACLE as borrowable asset",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addCollateral()": {
        "details": "Users send ETH which is stored as collateral for borrowing ORACLE tokens"
      },
      "borrowOracle(uint256)": {
        "params": {
          "borrowAmount": "Amount of ORACLE tokens to borrow (18 decimals)"
        }
      },
      "calculateCollateralValue(uint256)": {
        "params": {
          "collateralAmount": "ETH collateral amount in wei"
        },
        "returns": {
          "value": "Collateral value in ORACLE tokens (18 decimals)"
        }
      },
      "emergencyWithdrawETH(uint256)": {
        "params": {
          "amount": "Amount of ETH to withdraw"
        }
      },
      "emergencyWithdrawOracle(uint256)": {
        "params": {
          "amount": "Amount of ORACLE tokens to withdraw"
        }
      },
      "fundContract(uint256)": {
        "params": {
          "amount": "Amount of ORACLE tokens to add"
        }
      },
      "getContractETHBalance()": {
        "returns": {
          "balance": "Available ETH balance"
        }
      },
      "getContractOracleBalance()": {
        "returns": {
          "balance": "Available ORACLE tokens for lending"
        }
      },
      "getCurrentPrice()": {
        "returns": {
          "price": "ORACLE per 1 ETH (18 decimals)"
        }
      },
      "getHealthRatio(address)": {
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "ratio": "Health ratio as percentage (120 = 120%)"
        }
      },
      "getMaxBorrowAmount(address)": {
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "maxBorrow": "Maximum borrowable amount"
        }
      },
      "getMaxWithdrawableCollateral(address)": {
        "params": {
          "user": "Address to check  "
        },
        "returns": {
          "maxWithdraw": "Maximum withdrawable ETH amount"
        }
      },
      "getUserPosition(address)": {
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "borrowed": "ORACLE debt amount  ",
          "collateral": "ETH collateral amount",
          "collateralValue": "Collateral value in ORACLE",
          "healthRatio": "Health ratio percentage",
          "liquidatable": "Whether position can be liquidated"
        }
      },
      "isLiquidatable(address)": {
        "params": {
          "user": "Address to check"
        },
        "returns": {
          "liquidatable": "True if position can be liquidated"
        }
      },
      "liquidate(address)": {
        "details": "Liquidator must approve ORACLE tokens to this contract first",
        "params": {
          "user": "Address of the user to liquidate"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "repayOracle(uint256)": {
        "params": {
          "repayAmount": "Amount of ORACLE tokens to repay (user must approve first)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawCollateral(uint256)": {
        "params": {
          "amount": "Amount of ETH to withdraw in wei"
        }
      }
    },
    "title": "OracleLend",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCollateral()": {
        "notice": "Deposit ETH as collateral"
      },
      "borrowOracle(uint256)": {
        "notice": "Borrow ORACLE tokens against ETH collateral"
      },
      "calculateCollateralValue(uint256)": {
        "notice": "Calculate collateral value in ORACLE terms"
      },
      "emergencyWithdrawETH(uint256)": {
        "notice": "Emergency withdrawal of ETH (only owner)"
      },
      "emergencyWithdrawOracle(uint256)": {
        "notice": "Emergency withdrawal of ORACLE tokens (only owner)"
      },
      "fundContract(uint256)": {
        "notice": "Fund the contract with ORACLE tokens for lending"
      },
      "getContractETHBalance()": {
        "notice": "Get contract's ETH balance"
      },
      "getContractOracleBalance()": {
        "notice": "Get contract's ORACLE token balance"
      },
      "getCurrentPrice()": {
        "notice": "Get current ORACLE price in terms of ETH from DEX"
      },
      "getHealthRatio(address)": {
        "notice": "Get user's position health ratio (percentage)"
      },
      "getMaxBorrowAmount(address)": {
        "notice": "Get maximum ORACLE amount a user can borrow"
      },
      "getMaxWithdrawableCollateral(address)": {
        "notice": "Get maximum ETH collateral a user can withdraw"
      },
      "getUserPosition(address)": {
        "notice": "Get user's complete position info"
      },
      "isLiquidatable(address)": {
        "notice": "Check if a position is liquidatable (health ratio < 120%)"
      },
      "liquidate(address)": {
        "notice": "Liquidate an unsafe position"
      },
      "pause()": {
        "notice": "Pause the protocol (emergency stop)"
      },
      "repayOracle(uint256)": {
        "notice": "Repay ORACLE token debt"
      },
      "unpause()": {
        "notice": "Unpause the protocol"
      },
      "withdrawCollateral(uint256)": {
        "notice": "Withdraw ETH collateral (if position remains healthy)"
      }
    },
    "notice": "Based on SpeedRunEthereum lending challenge - uses DEX for price discovery",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1640,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1521,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2932,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "userCollateral",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2936,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "userBorrowed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}