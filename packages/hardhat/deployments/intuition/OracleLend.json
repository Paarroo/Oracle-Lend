{
  "address": "0x59D61CbD345836C2243323123595023F90aD9b1E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenBorrowed",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBorrowed",
          "type": "uint256"
        }
      ],
      "name": "Liquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplyRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowRate",
          "type": "uint256"
        }
      ],
      "name": "MarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_BONUS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_supplyRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrowRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralFactor",
          "type": "uint256"
        }
      ],
      "name": "addMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalBorrowValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUserAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supplied",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUtilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenBorrowed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "marketExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplyRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_supplyRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrowRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralFactor",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "updateMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x16f08693ad49fd94f35ff8e597a246de43e19ddcb8771681a31e365ca0e5637a",
  "receipt": {
    "to": null,
    "from": "0xAD50D6A764F10D531A759cc4b651FE3A96c7D03B",
    "contractAddress": "0x59D61CbD345836C2243323123595023F90aD9b1E",
    "transactionIndex": 1,
    "gasUsed": "1870178",
    "logsBloom": "0x
    "blockHash": "0x519eba59a651407edaa21dbad914373c6459de512d8579f2d4c5d9fec7865fa7",
    "transactionHash": "0x16f08693ad49fd94f35ff8e597a246de43e19ddcb8771681a31e365ca0e5637a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1401386,
        "transactionHash": "0x16f08693ad49fd94f35ff8e597a246de43e19ddcb8771681a31e365ca0e5637a",
        "address": "0x59D61CbD345836C2243323123595023F90aD9b1E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ad50d6a764f10d531a759cc4b651fe3a96c7d03b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x519eba59a651407edaa21dbad914373c6459de512d8579f2d4c5d9fec7865fa7"
      }
    ],
    "blockNumber": 1401386,
    "cumulativeGasUsed": "1870178",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b9ef2773204e7894a700a9e1b7c45074",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenBorrowed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"}],\"name\":\"Liquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"name\":\"MarketAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralFactor\",\"type\":\"uint256\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalBorrowValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUtilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"updateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Decentralized lending and borrowing protocol on Intuition testnet\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addMarket(address,uint256,uint256,uint256)\":{\"details\":\"Add a new lending market\",\"params\":{\"_borrowRate\":\"Borrow interest rate in basis points\",\"_collateralFactor\":\"Collateral factor in basis points\",\"_supplyRate\":\"Supply interest rate in basis points\",\"_token\":\"Token contract address\"}},\"borrow(address,uint256)\":{\"details\":\"Borrow tokens against collateral\",\"params\":{\"_amount\":\"Amount to borrow\",\"_token\":\"Token address to borrow\"}},\"emergencyWithdraw(address,uint256)\":{\"details\":\"Emergency withdrawal function for admin\"},\"getAllMarkets()\":{\"details\":\"Get all markets\"},\"getBorrowPower(address)\":{\"details\":\"Get user's borrow power (maximum amount they can borrow)\"},\"getHealthFactor(address)\":{\"details\":\"Get user's health factor (collateral value / borrow value)\"},\"getTotalBorrowValue(address)\":{\"details\":\"Get user's total borrow value\"},\"getUserAccount(address,address)\":{\"details\":\"Get user account info\"},\"getUtilizationRate(address)\":{\"details\":\"Get market utilization rate\"},\"liquidate(address,address,address,uint256)\":{\"details\":\"Liquidate an unhealthy account\",\"params\":{\"_amount\":\"Amount to repay\",\"_borrower\":\"Address of the borrower to liquidate\",\"_tokenBorrowed\":\"Token address of borrowed asset to repay\",\"_tokenCollateral\":\"Token address of collateral to seize\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pause the protocol\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"repay(address,uint256)\":{\"details\":\"Repay borrowed tokens\",\"params\":{\"_amount\":\"Amount to repay\",\"_token\":\"Token address to repay\"}},\"supply(address,uint256)\":{\"details\":\"Supply tokens to the lending pool\",\"params\":{\"_amount\":\"Amount to supply\",\"_token\":\"Token address to supply\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the protocol\"},\"updateMarket(address,uint256,uint256,uint256,bool)\":{\"details\":\"Update market parameters\"},\"withdraw(address,uint256)\":{\"details\":\"Withdraw supplied tokens\",\"params\":{\"_amount\":\"Amount to withdraw\",\"_token\":\"Token address to withdraw\"}}},\"title\":\"OracleLend\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Allows users to supply assets to earn interest and borrow against collateral\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OracleLend.sol\":\"OracleLend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/OracleLend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @title OracleLend\\n * @dev Decentralized lending and borrowing protocol on Intuition testnet\\n * @notice Allows users to supply assets to earn interest and borrow against collateral\\n */\\ncontract OracleLend is Ownable, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    // State variables\\n    struct Market {\\n        IERC20 token;\\n        uint256 totalSupply;\\n        uint256 totalBorrow;\\n        uint256 supplyRate; // Annual percentage rate in basis points (e.g., 350 = 3.5%)\\n        uint256 borrowRate; // Annual percentage rate in basis points\\n        uint256 collateralFactor; // Percentage in basis points (e.g., 7500 = 75%)\\n        uint256 liquidationThreshold; // Percentage in basis points\\n        bool isActive;\\n    }\\n\\n    struct UserAccount {\\n        mapping(address => uint256) supplied; // token => amount\\n        mapping(address => uint256) borrowed; // token => amount\\n        mapping(address => uint256) supplyIndex; // For interest calculation\\n        mapping(address => uint256) borrowIndex; // For interest calculation\\n    }\\n\\n    // Constants\\n    uint256 public constant BASIS_POINTS = 10000;\\n    uint256 public constant SECONDS_PER_YEAR = 365 days;\\n    uint256 public constant LIQUIDATION_BONUS = 500; // 5% bonus for liquidators\\n\\n    // State mappings\\n    mapping(address => Market) public markets;\\n    mapping(address => UserAccount) internal userAccounts;\\n    mapping(address => bool) public marketExists;\\n    address[] public allMarkets;\\n\\n    // Events\\n    event MarketAdded(address indexed token, uint256 supplyRate, uint256 borrowRate);\\n    event Supply(address indexed user, address indexed token, uint256 amount);\\n    event Withdraw(address indexed user, address indexed token, uint256 amount);\\n    event Borrow(address indexed user, address indexed token, uint256 amount);\\n    event Repay(address indexed user, address indexed token, uint256 amount);\\n    event Liquidation(\\n        address indexed liquidator,\\n        address indexed borrower,\\n        address indexed tokenCollateral,\\n        address tokenBorrowed,\\n        uint256 amountCollateral,\\n        uint256 amountBorrowed\\n    );\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Add a new lending market\\n     * @param _token Token contract address\\n     * @param _supplyRate Supply interest rate in basis points\\n     * @param _borrowRate Borrow interest rate in basis points\\n     * @param _collateralFactor Collateral factor in basis points\\n     */\\n    function addMarket(\\n        address _token,\\n        uint256 _supplyRate,\\n        uint256 _borrowRate,\\n        uint256 _collateralFactor\\n    ) external onlyOwner {\\n        require(_token != address(0), \\\"Invalid token address\\\");\\n        require(!marketExists[_token], \\\"Market already exists\\\");\\n        require(_collateralFactor <= BASIS_POINTS, \\\"Invalid collateral factor\\\");\\n        require(_borrowRate > _supplyRate, \\\"Borrow rate must be higher than supply rate\\\");\\n\\n        markets[_token] = Market({\\n            token: IERC20(_token),\\n            totalSupply: 0,\\n            totalBorrow: 0,\\n            supplyRate: _supplyRate,\\n            borrowRate: _borrowRate,\\n            collateralFactor: _collateralFactor,\\n            liquidationThreshold: _collateralFactor + 1000, // +10% buffer\\n            isActive: true\\n        });\\n\\n        marketExists[_token] = true;\\n        allMarkets.push(_token);\\n\\n        emit MarketAdded(_token, _supplyRate, _borrowRate);\\n    }\\n\\n    /**\\n     * @dev Supply tokens to the lending pool\\n     * @param _token Token address to supply\\n     * @param _amount Amount to supply\\n     */\\n    function supply(address _token, uint256 _amount) external nonReentrant whenNotPaused {\\n        require(marketExists[_token], \\\"Market does not exist\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        \\n        Market storage market = markets[_token];\\n        require(market.isActive, \\\"Market is not active\\\");\\n\\n        // Update interest before changing balances\\n        _updateSupplyIndex(_token, msg.sender);\\n\\n        // Transfer tokens from user\\n        market.token.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Update user balance\\n        userAccounts[msg.sender].supplied[_token] = userAccounts[msg.sender].supplied[_token] + _amount;\\n        \\n        // Update market totals\\n        market.totalSupply = market.totalSupply + _amount;\\n\\n        emit Supply(msg.sender, _token, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw supplied tokens\\n     * @param _token Token address to withdraw\\n     * @param _amount Amount to withdraw\\n     */\\n    function withdraw(address _token, uint256 _amount) external nonReentrant whenNotPaused {\\n        require(marketExists[_token], \\\"Market does not exist\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        UserAccount storage account = userAccounts[msg.sender];\\n        require(account.supplied[_token] >= _amount, \\\"Insufficient supply balance\\\");\\n\\n        // Update interest before changing balances\\n        _updateSupplyIndex(_token, msg.sender);\\n\\n        // Check if withdrawal would make account unhealthy\\n        uint256 newSupplyBalance = account.supplied[_token] - _amount;\\n        require(_isAccountHealthy(msg.sender, _token, newSupplyBalance, account.supplied[_token]), \\\"Withdrawal would make account unhealthy\\\");\\n\\n        // Update balances\\n        account.supplied[_token] = newSupplyBalance;\\n        markets[_token].totalSupply = markets[_token].totalSupply - _amount;\\n\\n        // Transfer tokens to user\\n        markets[_token].token.safeTransfer(msg.sender, _amount);\\n\\n        emit Withdraw(msg.sender, _token, _amount);\\n    }\\n\\n    /**\\n     * @dev Borrow tokens against collateral\\n     * @param _token Token address to borrow\\n     * @param _amount Amount to borrow\\n     */\\n    function borrow(address _token, uint256 _amount) external nonReentrant whenNotPaused {\\n        require(marketExists[_token], \\\"Market does not exist\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        \\n        Market storage market = markets[_token];\\n        require(market.isActive, \\\"Market is not active\\\");\\n        require(market.token.balanceOf(address(this)) >= _amount, \\\"Insufficient liquidity\\\");\\n\\n        // Update interest before changing balances\\n        _updateBorrowIndex(_token, msg.sender);\\n\\n        // Check if user can borrow this amount\\n        uint256 borrowPower = getBorrowPower(msg.sender);\\n        uint256 currentBorrowValue = getTotalBorrowValue(msg.sender);\\n        uint256 newBorrowValue = currentBorrowValue + _amount; // Simplified: assumes token price = 1\\n\\n        require(newBorrowValue <= borrowPower, \\\"Insufficient collateral\\\");\\n\\n        // Update user balance\\n        userAccounts[msg.sender].borrowed[_token] = userAccounts[msg.sender].borrowed[_token] + _amount;\\n        \\n        // Update market totals\\n        market.totalBorrow = market.totalBorrow + _amount;\\n\\n        // Transfer tokens to user\\n        market.token.safeTransfer(msg.sender, _amount);\\n\\n        emit Borrow(msg.sender, _token, _amount);\\n    }\\n\\n    /**\\n     * @dev Repay borrowed tokens\\n     * @param _token Token address to repay\\n     * @param _amount Amount to repay\\n     */\\n    function repay(address _token, uint256 _amount) external nonReentrant whenNotPaused {\\n        require(marketExists[_token], \\\"Market does not exist\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        UserAccount storage account = userAccounts[msg.sender];\\n        uint256 borrowBalance = account.borrowed[_token];\\n        require(borrowBalance > 0, \\\"No debt to repay\\\");\\n\\n        // Update interest before changing balances\\n        _updateBorrowIndex(_token, msg.sender);\\n\\n        // Cap amount to borrowed balance\\n        uint256 repayAmount = _amount > borrowBalance ? borrowBalance : _amount;\\n\\n        // Transfer tokens from user\\n        markets[_token].token.safeTransferFrom(msg.sender, address(this), repayAmount);\\n\\n        // Update balances\\n        account.borrowed[_token] = borrowBalance - repayAmount;\\n        markets[_token].totalBorrow = markets[_token].totalBorrow - repayAmount;\\n\\n        emit Repay(msg.sender, _token, repayAmount);\\n    }\\n\\n    /**\\n     * @dev Liquidate an unhealthy account\\n     * @param _borrower Address of the borrower to liquidate\\n     * @param _tokenCollateral Token address of collateral to seize\\n     * @param _tokenBorrowed Token address of borrowed asset to repay\\n     * @param _amount Amount to repay\\n     */\\n    function liquidate(\\n        address _borrower,\\n        address _tokenCollateral,\\n        address _tokenBorrowed,\\n        uint256 _amount\\n    ) external nonReentrant whenNotPaused {\\n        require(_borrower != msg.sender, \\\"Cannot liquidate yourself\\\");\\n        require(marketExists[_tokenCollateral] && marketExists[_tokenBorrowed], \\\"Invalid markets\\\");\\n        \\n        // Check if account is liquidatable\\n        require(!_isAccountHealthy(_borrower, address(0), 0, 0), \\\"Account is healthy\\\");\\n        \\n        UserAccount storage borrowerAccount = userAccounts[_borrower];\\n        uint256 borrowBalance = borrowerAccount.borrowed[_tokenBorrowed];\\n        require(borrowBalance > 0, \\\"No debt to liquidate\\\");\\n        \\n        // Cap liquidation amount\\n        uint256 liquidateAmount = _amount > borrowBalance ? borrowBalance : _amount;\\n        \\n        // Calculate collateral to seize (with liquidation bonus)\\n        uint256 collateralAmount = liquidateAmount * (BASIS_POINTS + LIQUIDATION_BONUS) / BASIS_POINTS;\\n        require(borrowerAccount.supplied[_tokenCollateral] >= collateralAmount, \\\"Insufficient collateral\\\");\\n        \\n        // Transfer repayment from liquidator\\n        markets[_tokenBorrowed].token.safeTransferFrom(msg.sender, address(this), liquidateAmount);\\n        \\n        // Update borrower balances\\n        borrowerAccount.borrowed[_tokenBorrowed] = borrowBalance - liquidateAmount;\\n        borrowerAccount.supplied[_tokenCollateral] = borrowerAccount.supplied[_tokenCollateral] - collateralAmount;\\n        \\n        // Update market totals\\n        markets[_tokenBorrowed].totalBorrow = markets[_tokenBorrowed].totalBorrow - liquidateAmount;\\n        markets[_tokenCollateral].totalSupply = markets[_tokenCollateral].totalSupply - collateralAmount;\\n        \\n        // Transfer collateral to liquidator\\n        markets[_tokenCollateral].token.safeTransfer(msg.sender, collateralAmount);\\n        \\n        emit Liquidation(msg.sender, _borrower, _tokenCollateral, _tokenBorrowed, collateralAmount, liquidateAmount);\\n    }\\n\\n    // View functions\\n\\n    /**\\n     * @dev Get user's borrow power (maximum amount they can borrow)\\n     */\\n    function getBorrowPower(address _user) public view returns (uint256) {\\n        uint256 totalCollateralValue = 0;\\n        \\n        for (uint256 i = 0; i < allMarkets.length; i++) {\\n            address token = allMarkets[i];\\n            uint256 supplied = userAccounts[_user].supplied[token];\\n            if (supplied > 0) {\\n                uint256 collateralValue = supplied * markets[token].collateralFactor / BASIS_POINTS;\\n                totalCollateralValue = totalCollateralValue + collateralValue;\\n            }\\n        }\\n        \\n        return totalCollateralValue;\\n    }\\n\\n    /**\\n     * @dev Get user's total borrow value\\n     */\\n    function getTotalBorrowValue(address _user) public view returns (uint256) {\\n        uint256 totalBorrowValue = 0;\\n        \\n        for (uint256 i = 0; i < allMarkets.length; i++) {\\n            address token = allMarkets[i];\\n            uint256 borrowed = userAccounts[_user].borrowed[token];\\n            totalBorrowValue = totalBorrowValue + borrowed; // Simplified: assumes token price = 1\\n        }\\n        \\n        return totalBorrowValue;\\n    }\\n\\n    /**\\n     * @dev Get user's health factor (collateral value / borrow value)\\n     */\\n    function getHealthFactor(address _user) external view returns (uint256) {\\n        uint256 borrowValue = getTotalBorrowValue(_user);\\n        if (borrowValue == 0) return type(uint256).max;\\n        \\n        uint256 collateralValue = getBorrowPower(_user) * BASIS_POINTS / 7500; // Assuming 75% collateral factor\\n        return collateralValue * BASIS_POINTS / borrowValue;\\n    }\\n\\n    /**\\n     * @dev Get market utilization rate\\n     */\\n    function getUtilizationRate(address _token) external view returns (uint256) {\\n        Market storage market = markets[_token];\\n        if (market.totalSupply == 0) return 0;\\n        return market.totalBorrow * BASIS_POINTS / market.totalSupply;\\n    }\\n\\n    /**\\n     * @dev Get user account info\\n     */\\n    function getUserAccount(address _user, address _token) external view returns (uint256 supplied, uint256 borrowed) {\\n        UserAccount storage account = userAccounts[_user];\\n        return (account.supplied[_token], account.borrowed[_token]);\\n    }\\n\\n    /**\\n     * @dev Get all markets\\n     */\\n    function getAllMarkets() external view returns (address[] memory) {\\n        return allMarkets;\\n    }\\n\\n    // Internal functions\\n\\n    function _updateSupplyIndex(address _token, address _user) internal {\\n        // Simplified interest calculation - in production, use compound interest\\n        UserAccount storage account = userAccounts[_user];\\n        account.supplyIndex[_token] = block.timestamp;\\n    }\\n\\n    function _updateBorrowIndex(address _token, address _user) internal {\\n        // Simplified interest calculation - in production, use compound interest\\n        UserAccount storage account = userAccounts[_user];\\n        account.borrowIndex[_token] = block.timestamp;\\n    }\\n\\n    function _isAccountHealthy(\\n        address _user,\\n        address _excludeToken,\\n        uint256 _newSupplyBalance,\\n        uint256 /* _oldSupplyBalance */\\n    ) internal view returns (bool) {\\n        uint256 totalCollateralValue = 0;\\n        uint256 totalBorrowValue = getTotalBorrowValue(_user);\\n        \\n        for (uint256 i = 0; i < allMarkets.length; i++) {\\n            address token = allMarkets[i];\\n            uint256 supplied;\\n            \\n            if (token == _excludeToken) {\\n                supplied = _newSupplyBalance;\\n            } else {\\n                supplied = userAccounts[_user].supplied[token];\\n            }\\n            \\n            if (supplied > 0) {\\n                uint256 collateralValue = supplied * markets[token].liquidationThreshold / BASIS_POINTS;\\n                totalCollateralValue = totalCollateralValue + collateralValue;\\n            }\\n        }\\n        \\n        return totalBorrowValue <= totalCollateralValue;\\n    }\\n\\n    // Admin functions\\n\\n    /**\\n     * @dev Pause the protocol\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the protocol\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Update market parameters\\n     */\\n    function updateMarket(\\n        address _token,\\n        uint256 _supplyRate,\\n        uint256 _borrowRate,\\n        uint256 _collateralFactor,\\n        bool _isActive\\n    ) external onlyOwner {\\n        require(marketExists[_token], \\\"Market does not exist\\\");\\n        require(_collateralFactor <= BASIS_POINTS, \\\"Invalid collateral factor\\\");\\n        \\n        Market storage market = markets[_token];\\n        market.supplyRate = _supplyRate;\\n        market.borrowRate = _borrowRate;\\n        market.collateralFactor = _collateralFactor;\\n        market.liquidationThreshold = _collateralFactor + 1000;\\n        market.isActive = _isActive;\\n    }\\n\\n    /**\\n     * @dev Emergency withdrawal function for admin\\n     */\\n    function emergencyWithdraw(address _token, uint256 _amount) external onlyOwner {\\n        IERC20(_token).safeTransfer(owner(), _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd5b20f547bc1ab70da1b104f26d4a0b49d2c4c6a4b715013b1a35c563e35bf11\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610054565b50600180556002805460ff191690556100a4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611ff0806100b36000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c806395ccea67116100de578063e21f0b5511610097578063f2b9fdb811610071578063f2b9fdb814610417578063f2fde38b1461042a578063f3fef3a31461043d578063fe6bcd7c1461045057600080fd5b8063e21f0b55146103e6578063e6a69ab8146103f9578063eb4e51e01461040457600080fd5b806395ccea6714610333578063a9de20b714610346578063aab3f86814610359578063b0772d0b1461036c578063ccf1a4b214610381578063e1f1c4a7146103dd57600080fd5b80636310af741161014b5780637b6aa8bd116101255780637b6aa8bd1461025f5780638456cb59146102725780638da5cb5b1461027a5780638e8f294b1461028b57600080fd5b80636310af7414610221578063712ca01814610234578063715018a61461025757600080fd5b806322867d78146101935780633574d4c4146101a85780633f4ba83a146101c45780634b8a3529146101cc57806352d84d1e146101df5780635c975abb1461020a575b600080fd5b6101a66101a1366004611c87565b610463565b005b6101b16101f481565b6040519081526020015b60405180910390f35b6101a661064a565b6101a66101da366004611c87565b61065c565b6101f26101ed366004611cb1565b610945565b6040516001600160a01b0390911681526020016101bb565b60025460ff165b60405190151581526020016101bb565b6101a661022f366004611cca565b61096f565b610211610242366004611d03565b60056020526000908152604090205460ff1681565b6101a6610c45565b6101b161026d366004611d03565b610c57565b6101a6610cab565b6000546001600160a01b03166101f2565b6102ec610299366004611d03565b6003602081905260009182526040909120805460018201546002830154938301546004840154600585015460068601546007909601546001600160a01b0390951696939593949293919290919060ff1688565b604080516001600160a01b0390991689526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016101bb565b6101a6610341366004611c87565b610cbb565b6101a6610354366004611d2c565b610ce9565b6101a6610367366004611d80565b610dcf565b61037461117e565b6040516101bb9190611dcb565b6103c861038f366004611e18565b6001600160a01b039182166000908152600460209081526040808320939094168252828152838220546001909301905291909120549091565b604080519283526020830191909152016101bb565b6101b161271081565b6101b16103f4366004611d03565b6111e0565b6101b16301e1338081565b6101b1610412366004611d03565b61129e565b6101a6610425366004611c87565b61131e565b6101a6610438366004611d03565b6114db565b6101a661044b366004611c87565b611519565b6101b161045e366004611d03565b611764565b61046b6117ca565b6104736117f4565b6001600160a01b03821660009081526005602052604090205460ff166104b45760405162461bcd60e51b81526004016104ab90611e4b565b60405180910390fd5b600081116104d45760405162461bcd60e51b81526004016104ab90611e7a565b3360009081526004602090815260408083206001600160a01b038616845260018101909252909120548061053d5760405162461bcd60e51b815260206004820152601060248201526f4e6f206465627420746f20726570617960801b60448201526064016104ab565b3360009081526004602090815260408083206001600160a01b038816845260030190915281204290558184116105735783610575565b815b6001600160a01b0380871660009081526003602052604090205491925061059f9116333084611818565b6105a98183611ec7565b6001600160a01b03861660009081526001850160209081526040808320939093556003905220600201546105de908290611ec7565b6001600160a01b0386166000818152600360205260409081902060020192909255905133907f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac4684906106329085815260200190565b60405180910390a350505061064660018055565b5050565b61065261187f565b61065a6118ac565b565b6106646117ca565b61066c6117f4565b6001600160a01b03821660009081526005602052604090205460ff166106a45760405162461bcd60e51b81526004016104ab90611e4b565b600081116106c45760405162461bcd60e51b81526004016104ab90611e7a565b6001600160a01b0382166000908152600360205260409020600781015460ff166107275760405162461bcd60e51b81526020600482015260146024820152734d61726b6574206973206e6f742061637469766560601b60448201526064016104ab565b80546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa15801561076e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107929190611eda565b10156107d95760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b60448201526064016104ab565b3360009081526004602090815260408083206001600160a01b03871684526003019091529020429055600061080d336111e0565b9050600061081a3361129e565b905060006108288583611ef3565b9050828111156108745760405162461bcd60e51b8152602060048201526017602482015276125b9cdd59999a58da595b9d0818dbdb1b185d195c985b604a1b60448201526064016104ab565b3360009081526004602090815260408083206001600160a01b038a1684526001019091529020546108a6908690611ef3565b3360009081526004602090815260408083206001600160a01b038b16845260010190915290205560028401546108dd908690611ef3565b600285015583546108f8906001600160a01b031633876118fe565b6040518581526001600160a01b0387169033907f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b529060200160405180910390a35050505061064660018055565b6006818154811061095557600080fd5b6000918252602090912001546001600160a01b0316905081565b61097761187f565b6001600160a01b0384166109c55760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b60448201526064016104ab565b6001600160a01b03841660009081526005602052604090205460ff1615610a265760405162461bcd60e51b81526020600482015260156024820152744d61726b657420616c72656164792065786973747360581b60448201526064016104ab565b612710811115610a745760405162461bcd60e51b815260206004820152601960248201527824b73b30b634b21031b7b63630ba32b930b6103330b1ba37b960391b60448201526064016104ab565b828211610ad75760405162461bcd60e51b815260206004820152602b60248201527f426f72726f772072617465206d75737420626520686967686572207468616e2060448201526a737570706c79207261746560a81b60648201526084016104ab565b604051806101000160405280856001600160a01b031681526020016000815260200160008152602001848152602001838152602001828152602001826103e8610b209190611ef3565b8152600160209182018190526001600160a01b038088166000818152600380865260408083208851815496166001600160a01b031996871617815588880151818801558882015160028201556060890151928101929092556080880151600483015560a088015160058084019190915560c089015160068085019190915560e0909901516007909301805493151560ff1994851617905590965285822080549091168517905585549384018655949094527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f909101805490911683179055517faeb29651ee58d1f8216621256cf5fe5cdf5c1a7650175c620342e0eb03de0f8e90610c379086908690918252602082015260400190565b60405180910390a250505050565b610c4d61187f565b61065a6000611934565b6001600160a01b038116600090815260036020526040812060018101548203610c835750600092915050565b80600101546127108260020154610c9a9190611f06565b610ca49190611f1d565b9392505050565b610cb361187f565b61065a611984565b610cc361187f565b610646610cd86000546001600160a01b031690565b6001600160a01b03841690836118fe565b610cf161187f565b6001600160a01b03851660009081526005602052604090205460ff16610d295760405162461bcd60e51b81526004016104ab90611e4b565b612710821115610d775760405162461bcd60e51b815260206004820152601960248201527824b73b30b634b21031b7b63630ba32b930b6103330b1ba37b960391b60448201526064016104ab565b6001600160a01b03851660009081526003602081905260409091209081018590556004810184905560058101839055610db2836103e8611ef3565b6006820155600701805460ff191691151591909117905550505050565b610dd76117ca565b610ddf6117f4565b336001600160a01b03851603610e375760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f74206c697175696461746520796f757273656c660000000000000060448201526064016104ab565b6001600160a01b03831660009081526005602052604090205460ff168015610e7757506001600160a01b03821660009081526005602052604090205460ff165b610eb55760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206d61726b65747360881b60448201526064016104ab565b610ec38460008060006119c1565b15610f055760405162461bcd60e51b81526020600482015260126024820152714163636f756e74206973206865616c74687960701b60448201526064016104ab565b6001600160a01b03808516600090815260046020908152604080832093861683526001840190915290205480610f745760405162461bcd60e51b81526020600482015260146024820152734e6f206465627420746f206c697175696461746560601b60448201526064016104ab565b6000818411610f835783610f85565b815b90506000612710610f986101f482611ef3565b610fa29084611f06565b610fac9190611f1d565b6001600160a01b0388166000908152602086905260409020549091508111156110115760405162461bcd60e51b8152602060048201526017602482015276125b9cdd59999a58da595b9d0818dbdb1b185d195c985b604a1b60448201526064016104ab565b6001600160a01b038087166000908152600360205260409020546110389116333085611818565b6110428284611ec7565b6001600160a01b038088166000908152600187016020908152604080832094909455918a16815290869052205461107a908290611ec7565b6001600160a01b03808916600090815260208781526040808320949094559189168152600390915220600201546110b2908390611ec7565b6001600160a01b0380881660009081526003602052604080822060020193909355908916815220600101546110e8908290611ec7565b6001600160a01b03808916600090815260036020526040902060018101929092559054611117911633836118fe565b604080516001600160a01b03888116825260208201849052918101849052818916918a169033907f64f7c2c46814e079964a1934953e50adc025dc52cdbeb7d8e478e9fb9bfd2c2d9060600160405180910390a45050505061117860018055565b50505050565b606060068054806020026020016040519081016040528092919081815260200182805480156111d657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111b8575b5050505050905090565b600080805b6006548110156112975760006006828154811061120457611204611f3f565b60009182526020808320909101546001600160a01b038881168452600483526040808520919092168085529252909120549091508015611282576001600160a01b038216600090815260036020526040812060050154612710906112689084611f06565b6112729190611f1d565b905061127e8186611ef3565b9450505b5050808061128f90611f55565b9150506111e5565b5092915050565b600080805b600654811015611297576000600682815481106112c2576112c2611f3f565b60009182526020808320909101546001600160a01b03888116845260048352604080852091909216808552600191909101909252909120549091506113078185611ef3565b93505050808061131690611f55565b9150506112a3565b6113266117ca565b61132e6117f4565b6001600160a01b03821660009081526005602052604090205460ff166113665760405162461bcd60e51b81526004016104ab90611e4b565b600081116113865760405162461bcd60e51b81526004016104ab90611e7a565b6001600160a01b0382166000908152600360205260409020600781015460ff166113e95760405162461bcd60e51b81526020600482015260146024820152734d61726b6574206973206e6f742061637469766560601b60448201526064016104ab565b3360009081526004602090815260408083206001600160a01b038716845260020190915290204290558054611429906001600160a01b0316333085611818565b3360009081526004602090815260408083206001600160a01b0387168452909152902054611458908390611ef3565b3360009081526004602090815260408083206001600160a01b0388168452909152902055600181015461148c908390611ef3565b60018201556040518281526001600160a01b0384169033907fd1cf3d156d5f8f0d50f6c122ed609cec09d35c9b9fb3fff6ea0959134dae424e9060200160405180910390a35061064660018055565b6114e361187f565b6001600160a01b03811661150d57604051631e4fbdf760e01b8152600060048201526024016104ab565b61151681611934565b50565b6115216117ca565b6115296117f4565b6001600160a01b03821660009081526005602052604090205460ff166115615760405162461bcd60e51b81526004016104ab90611e4b565b600081116115815760405162461bcd60e51b81526004016104ab90611e7a565b3360009081526004602090815260408083206001600160a01b038616845291829052909120548211156115f65760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420737570706c792062616c616e6365000000000060448201526064016104ab565b3360009081526004602090815260408083206001600160a01b0387168452600201825280832042905590839052812054611631908490611ec7565b6001600160a01b03851660009081526020849052604090205490915061165c903390869084906119c1565b6116b85760405162461bcd60e51b815260206004820152602760248201527f5769746864726177616c20776f756c64206d616b65206163636f756e7420756e6044820152666865616c74687960c81b60648201526084016104ab565b6001600160a01b03841660009081526020838152604080832084905560039091529020600101546116ea908490611ec7565b6001600160a01b03808616600090815260036020526040902060018101929092559054611719911633856118fe565b6040518381526001600160a01b0385169033907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a3505061064660018055565b6000806117708361129e565b905080600003611784575060001992915050565b6000611d4c612710611795866111e0565b61179f9190611f06565b6117a99190611f1d565b9050816117b861271083611f06565b6117c29190611f1d565b949350505050565b6002600154036117ed57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60025460ff161561065a5760405163d93c066560e01b815260040160405180910390fd5b6040516001600160a01b0384811660248301528381166044830152606482018390526111789186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611aac565b6000546001600160a01b0316331461065a5760405163118cdaa760e01b81523360048201526024016104ab565b6118b4611b0f565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b0383811660248301526044820183905261192f91859182169063a9059cbb9060640161184d565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61198c6117f4565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118e13390565b600080806119ce8761129e565b905060005b600654811015611aa0576000600682815481106119f2576119f2611f3f565b60009182526020822001546001600160a01b03908116925089168203611a19575086611a41565b506001600160a01b03808a166000908152600460209081526040808320938516835292905220545b8015611a8b576001600160a01b03821660009081526003602052604081206006015461271090611a719084611f06565b611a7b9190611f1d565b9050611a878187611ef3565b9550505b50508080611a9890611f55565b9150506119d3565b50111595945050505050565b6000611ac16001600160a01b03841683611b32565b90508051600014158015611ae6575080806020019051810190611ae49190611f6e565b155b1561192f57604051635274afe760e01b81526001600160a01b03841660048201526024016104ab565b60025460ff1661065a57604051638dfc202b60e01b815260040160405180910390fd5b6060611b4083836000611b49565b90505b92915050565b606081471015611b6e5760405163cd78605960e01b81523060048201526024016104ab565b600080856001600160a01b03168486604051611b8a9190611f8b565b60006040518083038185875af1925050503d8060008114611bc7576040519150601f19603f3d011682016040523d82523d6000602084013e611bcc565b606091505b5091509150611bdc868383611be6565b9695505050505050565b606082611bfb57611bf682611c42565b610ca4565b8151158015611c1257506001600160a01b0384163b155b15611c3b57604051639996b31560e01b81526001600160a01b03851660048201526024016104ab565b5080610ca4565b805115611c525780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b0381168114611c8257600080fd5b919050565b60008060408385031215611c9a57600080fd5b611ca383611c6b565b946020939093013593505050565b600060208284031215611cc357600080fd5b5035919050565b60008060008060808587031215611ce057600080fd5b611ce985611c6b565b966020860135965060408601359560600135945092505050565b600060208284031215611d1557600080fd5b611b4082611c6b565b801515811461151657600080fd5b600080600080600060a08688031215611d4457600080fd5b611d4d86611c6b565b94506020860135935060408601359250606086013591506080860135611d7281611d1e565b809150509295509295909350565b60008060008060808587031215611d9657600080fd5b611d9f85611c6b565b9350611dad60208601611c6b565b9250611dbb60408601611c6b565b9396929550929360600135925050565b6020808252825182820181905260009190848201906040850190845b81811015611e0c5783516001600160a01b031683529284019291840191600101611de7565b50909695505050505050565b60008060408385031215611e2b57600080fd5b611e3483611c6b565b9150611e4260208401611c6b565b90509250929050565b60208082526015908201527413585c9ad95d08191bd95cc81b9bdd08195e1a5cdd605a1b604082015260600190565b6020808252601d908201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115611b4357611b43611eb1565b600060208284031215611eec57600080fd5b5051919050565b80820180821115611b4357611b43611eb1565b8082028115828204841417611b4357611b43611eb1565b600082611f3a57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201611f6757611f67611eb1565b5060010190565b600060208284031215611f8057600080fd5b8151610ca481611d1e565b6000825160005b81811015611fac5760208186018101518583015201611f92565b50600092019182525091905056fea26469706673582212209a344b895744afb9552579b093c12ad8f4bc62c993ba7292e6d93b380f671f6d64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c806395ccea67116100de578063e21f0b5511610097578063f2b9fdb811610071578063f2b9fdb814610417578063f2fde38b1461042a578063f3fef3a31461043d578063fe6bcd7c1461045057600080fd5b8063e21f0b55146103e6578063e6a69ab8146103f9578063eb4e51e01461040457600080fd5b806395ccea6714610333578063a9de20b714610346578063aab3f86814610359578063b0772d0b1461036c578063ccf1a4b214610381578063e1f1c4a7146103dd57600080fd5b80636310af741161014b5780637b6aa8bd116101255780637b6aa8bd1461025f5780638456cb59146102725780638da5cb5b1461027a5780638e8f294b1461028b57600080fd5b80636310af7414610221578063712ca01814610234578063715018a61461025757600080fd5b806322867d78146101935780633574d4c4146101a85780633f4ba83a146101c45780634b8a3529146101cc57806352d84d1e146101df5780635c975abb1461020a575b600080fd5b6101a66101a1366004611c87565b610463565b005b6101b16101f481565b6040519081526020015b60405180910390f35b6101a661064a565b6101a66101da366004611c87565b61065c565b6101f26101ed366004611cb1565b610945565b6040516001600160a01b0390911681526020016101bb565b60025460ff165b60405190151581526020016101bb565b6101a661022f366004611cca565b61096f565b610211610242366004611d03565b60056020526000908152604090205460ff1681565b6101a6610c45565b6101b161026d366004611d03565b610c57565b6101a6610cab565b6000546001600160a01b03166101f2565b6102ec610299366004611d03565b6003602081905260009182526040909120805460018201546002830154938301546004840154600585015460068601546007909601546001600160a01b0390951696939593949293919290919060ff1688565b604080516001600160a01b0390991689526020890197909752958701949094526060860192909252608085015260a084015260c0830152151560e0820152610100016101bb565b6101a6610341366004611c87565b610cbb565b6101a6610354366004611d2c565b610ce9565b6101a6610367366004611d80565b610dcf565b61037461117e565b6040516101bb9190611dcb565b6103c861038f366004611e18565b6001600160a01b039182166000908152600460209081526040808320939094168252828152838220546001909301905291909120549091565b604080519283526020830191909152016101bb565b6101b161271081565b6101b16103f4366004611d03565b6111e0565b6101b16301e1338081565b6101b1610412366004611d03565b61129e565b6101a6610425366004611c87565b61131e565b6101a6610438366004611d03565b6114db565b6101a661044b366004611c87565b611519565b6101b161045e366004611d03565b611764565b61046b6117ca565b6104736117f4565b6001600160a01b03821660009081526005602052604090205460ff166104b45760405162461bcd60e51b81526004016104ab90611e4b565b60405180910390fd5b600081116104d45760405162461bcd60e51b81526004016104ab90611e7a565b3360009081526004602090815260408083206001600160a01b038616845260018101909252909120548061053d5760405162461bcd60e51b815260206004820152601060248201526f4e6f206465627420746f20726570617960801b60448201526064016104ab565b3360009081526004602090815260408083206001600160a01b038816845260030190915281204290558184116105735783610575565b815b6001600160a01b0380871660009081526003602052604090205491925061059f9116333084611818565b6105a98183611ec7565b6001600160a01b03861660009081526001850160209081526040808320939093556003905220600201546105de908290611ec7565b6001600160a01b0386166000818152600360205260409081902060020192909255905133907f05f2eeda0e08e4b437f487c8d7d29b14537d15e3488170dc3de5dbdf8dac4684906106329085815260200190565b60405180910390a350505061064660018055565b5050565b61065261187f565b61065a6118ac565b565b6106646117ca565b61066c6117f4565b6001600160a01b03821660009081526005602052604090205460ff166106a45760405162461bcd60e51b81526004016104ab90611e4b565b600081116106c45760405162461bcd60e51b81526004016104ab90611e7a565b6001600160a01b0382166000908152600360205260409020600781015460ff166107275760405162461bcd60e51b81526020600482015260146024820152734d61726b6574206973206e6f742061637469766560601b60448201526064016104ab565b80546040516370a0823160e01b815230600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa15801561076e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107929190611eda565b10156107d95760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b60448201526064016104ab565b3360009081526004602090815260408083206001600160a01b03871684526003019091529020429055600061080d336111e0565b9050600061081a3361129e565b905060006108288583611ef3565b9050828111156108745760405162461bcd60e51b8152602060048201526017602482015276125b9cdd59999a58da595b9d0818dbdb1b185d195c985b604a1b60448201526064016104ab565b3360009081526004602090815260408083206001600160a01b038a1684526001019091529020546108a6908690611ef3565b3360009081526004602090815260408083206001600160a01b038b16845260010190915290205560028401546108dd908690611ef3565b600285015583546108f8906001600160a01b031633876118fe565b6040518581526001600160a01b0387169033907f312a5e5e1079f5dda4e95dbbd0b908b291fd5b992ef22073643ab691572c5b529060200160405180910390a35050505061064660018055565b6006818154811061095557600080fd5b6000918252602090912001546001600160a01b0316905081565b61097761187f565b6001600160a01b0384166109c55760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b60448201526064016104ab565b6001600160a01b03841660009081526005602052604090205460ff1615610a265760405162461bcd60e51b81526020600482015260156024820152744d61726b657420616c72656164792065786973747360581b60448201526064016104ab565b612710811115610a745760405162461bcd60e51b815260206004820152601960248201527824b73b30b634b21031b7b63630ba32b930b6103330b1ba37b960391b60448201526064016104ab565b828211610ad75760405162461bcd60e51b815260206004820152602b60248201527f426f72726f772072617465206d75737420626520686967686572207468616e2060448201526a737570706c79207261746560a81b60648201526084016104ab565b604051806101000160405280856001600160a01b031681526020016000815260200160008152602001848152602001838152602001828152602001826103e8610b209190611ef3565b8152600160209182018190526001600160a01b038088166000818152600380865260408083208851815496166001600160a01b031996871617815588880151818801558882015160028201556060890151928101929092556080880151600483015560a088015160058084019190915560c089015160068085019190915560e0909901516007909301805493151560ff1994851617905590965285822080549091168517905585549384018655949094527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f909101805490911683179055517faeb29651ee58d1f8216621256cf5fe5cdf5c1a7650175c620342e0eb03de0f8e90610c379086908690918252602082015260400190565b60405180910390a250505050565b610c4d61187f565b61065a6000611934565b6001600160a01b038116600090815260036020526040812060018101548203610c835750600092915050565b80600101546127108260020154610c9a9190611f06565b610ca49190611f1d565b9392505050565b610cb361187f565b61065a611984565b610cc361187f565b610646610cd86000546001600160a01b031690565b6001600160a01b03841690836118fe565b610cf161187f565b6001600160a01b03851660009081526005602052604090205460ff16610d295760405162461bcd60e51b81526004016104ab90611e4b565b612710821115610d775760405162461bcd60e51b815260206004820152601960248201527824b73b30b634b21031b7b63630ba32b930b6103330b1ba37b960391b60448201526064016104ab565b6001600160a01b03851660009081526003602081905260409091209081018590556004810184905560058101839055610db2836103e8611ef3565b6006820155600701805460ff191691151591909117905550505050565b610dd76117ca565b610ddf6117f4565b336001600160a01b03851603610e375760405162461bcd60e51b815260206004820152601960248201527f43616e6e6f74206c697175696461746520796f757273656c660000000000000060448201526064016104ab565b6001600160a01b03831660009081526005602052604090205460ff168015610e7757506001600160a01b03821660009081526005602052604090205460ff165b610eb55760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206d61726b65747360881b60448201526064016104ab565b610ec38460008060006119c1565b15610f055760405162461bcd60e51b81526020600482015260126024820152714163636f756e74206973206865616c74687960701b60448201526064016104ab565b6001600160a01b03808516600090815260046020908152604080832093861683526001840190915290205480610f745760405162461bcd60e51b81526020600482015260146024820152734e6f206465627420746f206c697175696461746560601b60448201526064016104ab565b6000818411610f835783610f85565b815b90506000612710610f986101f482611ef3565b610fa29084611f06565b610fac9190611f1d565b6001600160a01b0388166000908152602086905260409020549091508111156110115760405162461bcd60e51b8152602060048201526017602482015276125b9cdd59999a58da595b9d0818dbdb1b185d195c985b604a1b60448201526064016104ab565b6001600160a01b038087166000908152600360205260409020546110389116333085611818565b6110428284611ec7565b6001600160a01b038088166000908152600187016020908152604080832094909455918a16815290869052205461107a908290611ec7565b6001600160a01b03808916600090815260208781526040808320949094559189168152600390915220600201546110b2908390611ec7565b6001600160a01b0380881660009081526003602052604080822060020193909355908916815220600101546110e8908290611ec7565b6001600160a01b03808916600090815260036020526040902060018101929092559054611117911633836118fe565b604080516001600160a01b03888116825260208201849052918101849052818916918a169033907f64f7c2c46814e079964a1934953e50adc025dc52cdbeb7d8e478e9fb9bfd2c2d9060600160405180910390a45050505061117860018055565b50505050565b606060068054806020026020016040519081016040528092919081815260200182805480156111d657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111b8575b5050505050905090565b600080805b6006548110156112975760006006828154811061120457611204611f3f565b60009182526020808320909101546001600160a01b038881168452600483526040808520919092168085529252909120549091508015611282576001600160a01b038216600090815260036020526040812060050154612710906112689084611f06565b6112729190611f1d565b905061127e8186611ef3565b9450505b5050808061128f90611f55565b9150506111e5565b5092915050565b600080805b600654811015611297576000600682815481106112c2576112c2611f3f565b60009182526020808320909101546001600160a01b03888116845260048352604080852091909216808552600191909101909252909120549091506113078185611ef3565b93505050808061131690611f55565b9150506112a3565b6113266117ca565b61132e6117f4565b6001600160a01b03821660009081526005602052604090205460ff166113665760405162461bcd60e51b81526004016104ab90611e4b565b600081116113865760405162461bcd60e51b81526004016104ab90611e7a565b6001600160a01b0382166000908152600360205260409020600781015460ff166113e95760405162461bcd60e51b81526020600482015260146024820152734d61726b6574206973206e6f742061637469766560601b60448201526064016104ab565b3360009081526004602090815260408083206001600160a01b038716845260020190915290204290558054611429906001600160a01b0316333085611818565b3360009081526004602090815260408083206001600160a01b0387168452909152902054611458908390611ef3565b3360009081526004602090815260408083206001600160a01b0388168452909152902055600181015461148c908390611ef3565b60018201556040518281526001600160a01b0384169033907fd1cf3d156d5f8f0d50f6c122ed609cec09d35c9b9fb3fff6ea0959134dae424e9060200160405180910390a35061064660018055565b6114e361187f565b6001600160a01b03811661150d57604051631e4fbdf760e01b8152600060048201526024016104ab565b61151681611934565b50565b6115216117ca565b6115296117f4565b6001600160a01b03821660009081526005602052604090205460ff166115615760405162461bcd60e51b81526004016104ab90611e4b565b600081116115815760405162461bcd60e51b81526004016104ab90611e7a565b3360009081526004602090815260408083206001600160a01b038616845291829052909120548211156115f65760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e7420737570706c792062616c616e6365000000000060448201526064016104ab565b3360009081526004602090815260408083206001600160a01b0387168452600201825280832042905590839052812054611631908490611ec7565b6001600160a01b03851660009081526020849052604090205490915061165c903390869084906119c1565b6116b85760405162461bcd60e51b815260206004820152602760248201527f5769746864726177616c20776f756c64206d616b65206163636f756e7420756e6044820152666865616c74687960c81b60648201526084016104ab565b6001600160a01b03841660009081526020838152604080832084905560039091529020600101546116ea908490611ec7565b6001600160a01b03808616600090815260036020526040902060018101929092559054611719911633856118fe565b6040518381526001600160a01b0385169033907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a3505061064660018055565b6000806117708361129e565b905080600003611784575060001992915050565b6000611d4c612710611795866111e0565b61179f9190611f06565b6117a99190611f1d565b9050816117b861271083611f06565b6117c29190611f1d565b949350505050565b6002600154036117ed57604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b60025460ff161561065a5760405163d93c066560e01b815260040160405180910390fd5b6040516001600160a01b0384811660248301528381166044830152606482018390526111789186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611aac565b6000546001600160a01b0316331461065a5760405163118cdaa760e01b81523360048201526024016104ab565b6118b4611b0f565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040516001600160a01b0383811660248301526044820183905261192f91859182169063a9059cbb9060640161184d565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61198c6117f4565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118e13390565b600080806119ce8761129e565b905060005b600654811015611aa0576000600682815481106119f2576119f2611f3f565b60009182526020822001546001600160a01b03908116925089168203611a19575086611a41565b506001600160a01b03808a166000908152600460209081526040808320938516835292905220545b8015611a8b576001600160a01b03821660009081526003602052604081206006015461271090611a719084611f06565b611a7b9190611f1d565b9050611a878187611ef3565b9550505b50508080611a9890611f55565b9150506119d3565b50111595945050505050565b6000611ac16001600160a01b03841683611b32565b90508051600014158015611ae6575080806020019051810190611ae49190611f6e565b155b1561192f57604051635274afe760e01b81526001600160a01b03841660048201526024016104ab565b60025460ff1661065a57604051638dfc202b60e01b815260040160405180910390fd5b6060611b4083836000611b49565b90505b92915050565b606081471015611b6e5760405163cd78605960e01b81523060048201526024016104ab565b600080856001600160a01b03168486604051611b8a9190611f8b565b60006040518083038185875af1925050503d8060008114611bc7576040519150601f19603f3d011682016040523d82523d6000602084013e611bcc565b606091505b5091509150611bdc868383611be6565b9695505050505050565b606082611bfb57611bf682611c42565b610ca4565b8151158015611c1257506001600160a01b0384163b155b15611c3b57604051639996b31560e01b81526001600160a01b03851660048201526024016104ab565b5080610ca4565b805115611c525780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b0381168114611c8257600080fd5b919050565b60008060408385031215611c9a57600080fd5b611ca383611c6b565b946020939093013593505050565b600060208284031215611cc357600080fd5b5035919050565b60008060008060808587031215611ce057600080fd5b611ce985611c6b565b966020860135965060408601359560600135945092505050565b600060208284031215611d1557600080fd5b611b4082611c6b565b801515811461151657600080fd5b600080600080600060a08688031215611d4457600080fd5b611d4d86611c6b565b94506020860135935060408601359250606086013591506080860135611d7281611d1e565b809150509295509295909350565b60008060008060808587031215611d9657600080fd5b611d9f85611c6b565b9350611dad60208601611c6b565b9250611dbb60408601611c6b565b9396929550929360600135925050565b6020808252825182820181905260009190848201906040850190845b81811015611e0c5783516001600160a01b031683529284019291840191600101611de7565b50909695505050505050565b60008060408385031215611e2b57600080fd5b611e3483611c6b565b9150611e4260208401611c6b565b90509250929050565b60208082526015908201527413585c9ad95d08191bd95cc81b9bdd08195e1a5cdd605a1b604082015260600190565b6020808252601d908201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115611b4357611b43611eb1565b600060208284031215611eec57600080fd5b5051919050565b80820180821115611b4357611b43611eb1565b8082028115828204841417611b4357611b43611eb1565b600082611f3a57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060018201611f6757611f67611eb1565b5060010190565b600060208284031215611f8057600080fd5b8151610ca481611d1e565b6000825160005b81811015611fac5760208186018101518583015201611f92565b50600092019182525091905056fea26469706673582212209a344b895744afb9552579b093c12ad8f4bc62c993ba7292e6d93b380f671f6d64736f6c63430008140033",
  "devdoc": {
    "details": "Decentralized lending and borrowing protocol on Intuition testnet",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addMarket(address,uint256,uint256,uint256)": {
        "details": "Add a new lending market",
        "params": {
          "_borrowRate": "Borrow interest rate in basis points",
          "_collateralFactor": "Collateral factor in basis points",
          "_supplyRate": "Supply interest rate in basis points",
          "_token": "Token contract address"
        }
      },
      "borrow(address,uint256)": {
        "details": "Borrow tokens against collateral",
        "params": {
          "_amount": "Amount to borrow",
          "_token": "Token address to borrow"
        }
      },
      "emergencyWithdraw(address,uint256)": {
        "details": "Emergency withdrawal function for admin"
      },
      "getAllMarkets()": {
        "details": "Get all markets"
      },
      "getBorrowPower(address)": {
        "details": "Get user's borrow power (maximum amount they can borrow)"
      },
      "getHealthFactor(address)": {
        "details": "Get user's health factor (collateral value / borrow value)"
      },
      "getTotalBorrowValue(address)": {
        "details": "Get user's total borrow value"
      },
      "getUserAccount(address,address)": {
        "details": "Get user account info"
      },
      "getUtilizationRate(address)": {
        "details": "Get market utilization rate"
      },
      "liquidate(address,address,address,uint256)": {
        "details": "Liquidate an unhealthy account",
        "params": {
          "_amount": "Amount to repay",
          "_borrower": "Address of the borrower to liquidate",
          "_tokenBorrowed": "Token address of borrowed asset to repay",
          "_tokenCollateral": "Token address of collateral to seize"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pause the protocol"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "repay(address,uint256)": {
        "details": "Repay borrowed tokens",
        "params": {
          "_amount": "Amount to repay",
          "_token": "Token address to repay"
        }
      },
      "supply(address,uint256)": {
        "details": "Supply tokens to the lending pool",
        "params": {
          "_amount": "Amount to supply",
          "_token": "Token address to supply"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause the protocol"
      },
      "updateMarket(address,uint256,uint256,uint256,bool)": {
        "details": "Update market parameters"
      },
      "withdraw(address,uint256)": {
        "details": "Withdraw supplied tokens",
        "params": {
          "_amount": "Amount to withdraw",
          "_token": "Token address to withdraw"
        }
      }
    },
    "title": "OracleLend",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Allows users to supply assets to earn interest and borrow against collateral",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 962,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 843,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1087,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "markets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Market)1056_storage)"
      },
      {
        "astId": 1092,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "userAccounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UserAccount)1073_storage)"
      },
      {
        "astId": 1096,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "marketExists",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1099,
        "contract": "contracts/OracleLend.sol:OracleLend",
        "label": "allMarkets",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)225": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Market)1056_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OracleLend.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)1056_storage"
      },
      "t_mapping(t_address,t_struct(UserAccount)1073_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OracleLend.UserAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(UserAccount)1073_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Market)1056_storage": {
        "encoding": "inplace",
        "label": "struct OracleLend.Market",
        "members": [
          {
            "astId": 1041,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)225"
          },
          {
            "astId": 1043,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "totalSupply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1045,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "totalBorrow",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1047,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "supplyRate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1049,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "borrowRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1051,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "collateralFactor",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1053,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "liquidationThreshold",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1055,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "isActive",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserAccount)1073_storage": {
        "encoding": "inplace",
        "label": "struct OracleLend.UserAccount",
        "members": [
          {
            "astId": 1060,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "supplied",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1064,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "borrowed",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1068,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "supplyIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 1072,
            "contract": "contracts/OracleLend.sol:OracleLend",
            "label": "borrowIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}